{"version":3,"sources":["scripts/mn-textarea.class.js"],"names":["MnInput","self","_this","_ret","_classCallCheck","this","setPlaceholder","setTextarea","_possibleConstructorReturn","placeholder","getAttribute","id","label","document","createElement","textContent","setAttribute","insertBefore","firstChild","setHeight","textarea","style","height","scrollHeight","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","_this2","Array","from","map","defaultAttibutes","concat","forEach","remove","removeAttribute","addEventListener","HTMLElement","customElements","define"],"mappings":"sxCAAMA,QAAAA,SAAAA,cACJ,QAAAA,SAAYC,MAAM,GAAAC,OAAAC,IAIhB,OAJgBC,iBAAAC,KAAAL,SAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,QAAAA,WAAAA,OAAAA,eAAAA,UAAAA,KAAAA,KAAaA,OACbC,MAAKI,iBACLJ,MAAKK,cACLJ,KAAOF,KAAPO,2BAAAN,MAAAC,0GAIA,GAAIM,aAAcJ,KAAKK,aAAa,eAChCC,GAAKN,KAAKK,aAAa,KAE3B,IAAID,YAAa,CACf,GAAIG,OAAQC,SAASC,cAAc,QACnCF,OAAMG,YAAcV,KAAKK,aAAa,YAC/BD,YADa,YAEhBA,YAEAE,IACFC,MAAMI,aAAa,MAAOL,IAG5BN,KAAKY,aAAaL,MAAOP,KAAKa,mDA8DhC,QAASC,aAEPC,SAASC,MAAMC,OAAS,OACxBF,SAASC,MAAMC,OAAYF,SAASG,aAApC,KAKF,QAASC,iBAAgBC,MACvB,GAAIC,MAAOD,KAAKC,KACZC,MAAQF,KAAKE,KACjB,QAAQD,KAAAA,KAAMC,MAAAA,OAGhB,QAASC,UAASC,WAChB,MAAOA,WAAUC,eAAe,WAGlC,QAASC,gBAAeC,aACtB,OAAQC,WAAWC,KAAK,SAAAL,WAAA,MAAaA,WAAUH,OAASM,YAAYN,OAGtE,QAASV,cAAaa,WACpB,GAAIM,eAAgBC,eAAeC,OAAO,SAAAC,MAAA,MAAQA,MAAKZ,OAASG,UAAUH,OAAM,EAChF,KAAKS,cACH,OAAO,CAET,IAAII,oBAAqBJ,cAAcL,eAAe,WAClDU,eAAiBX,UAAUF,KAE/B,IAAIY,mBAAoB,CACtB,GAAIE,cAAeN,cAAcL,eAAe,WAC3CK,cAAcO,OAAOC,QAAQH,iBAAmB,EAEjDb,MAAQc,aACRD,eACAL,cAAcS,OAElBxB,UAASJ,aAAaa,UAAUH,KAAMC,WAC7Ba,iBACTpB,SAASJ,aAAaa,UAAUH,KAAMc,gBAlG9B,GAAAK,QAAAxC,KACR+B,iBAEAV,KAAM,cACNkB,QAAS,cAGTlB,KAAM,OACNkB,QAAS,MAGTlB,KAAM,UAGNA,KAAM,SAGNA,KAAM,cAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAINN,SAAWP,SAASC,cAAc,YAElCmB,WAAaa,MACdC,KAAK1C,KAAK4B,YACVe,IAAIxB,iBAEHyB,iBAAmBb,eACpBC,OAAOT,UACPS,OAAON,eAEVE,YAAaA,WAAWiB,OAAOD,kBAE/BhB,WAAWkB,QAAQnC,cAEnBoB,eACGC,OAAO,SAAAZ,MAAA,MAAQA,MAAK2B,SACpBD,QAAQ,SAAA1B,MACPoB,OAAKQ,gBAAgB5B,KAAKC,QAG9BN,SAASkC,iBAAiB,QAASnC,WAQnCd,KAAKY,aAAaG,SAAUf,KAAKa,yBA1FfqC,YAkItBC,gBAAeC,OAAO,cAAezD","file":"mn-textarea.js","sourcesContent":["class MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    this.setPlaceholder()\n    this.setTextarea()\n    return self\n  }\n\n  setPlaceholder() {\n    let placeholder = this.getAttribute('placeholder')\n    let id = this.getAttribute('id')\n\n    if (placeholder) {\n      let label = document.createElement('label')\n      label.textContent = this.getAttribute('disabled')\n        ? `${placeholder} disabled`\n        : placeholder\n\n      if (id) {\n        label.setAttribute('for', id)\n      }\n\n      this.insertBefore(label, this.firstChild)\n    }\n  }\n\n  setTextarea() {\n    let attributeSpecs = [\n      {\n        name: 'placeholder',\n        default: 'undefined',\n      },\n      {\n        name: 'rows',\n        default: '1',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'maxlength',\n      },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n    ]\n\n    let textarea = document.createElement('textarea')\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue)\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented)\n\n    attributes = attributes.concat(defaultAttibutes)\n\n    attributes.forEach(setAttribute)\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name)\n      })\n\n    textarea.addEventListener('keyup', setHeight)\n\n    function setHeight() {\n      // textarea.setAttribute('style', `height:${textarea.scrollHeight}px`)\n      textarea.style.height = 'auto'\n      textarea.style.height = `${textarea.scrollHeight}px`\n    }\n\n    this.insertBefore(textarea, this.firstChild)\n\n    function getNameAndValue(attr) {\n      let name = attr.name\n      let value = attr.value\n      return {name, value}\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default')\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0]\n      if (!attributeSpec) {\n        return false\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default')\n      let attributeValue = attribute.value\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default\n\n        textarea.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        textarea.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n}\n\ncustomElements.define('mn-textarea', MnInput)\n"]}