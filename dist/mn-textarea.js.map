{"version":3,"sources":["scripts/mn-textarea.component.js"],"names":["mnTextarea","setHeight","breaks","this","value","match","length","rows","console","log","setAttribute","setInputAttribute","attribute","isDefaultAttribute","hasOwnProperty","attributeValue","element","getAttribute","name","isValidValue","values","indexOf","default","textarea","textareaAttributes","document","createElement","map","appendChild","addEventListener","placeholder","label","textContent","prototype","Object","create","HTMLElement","createdCallback","registerElement"],"mappings":"AAAA,YAMA,SAASA,cA6CP,QAASC,aACP,GAAIC,SAAUC,KAAKC,MAAMC,MAAM,YAAcC,OACzCC,KAAAA,MACJ,QAAQL,QACN,IAAK,GACHK,KAAO,CACP,MACF,KAAK,GACHA,KAAO,CACP,MACF,SACEA,KAAOL,OAAS,EAEpBM,QAAQC,IAAIF,MACZJ,KAAKO,aAAa,OAAQH,MAa5B,QAASI,mBAAkBC,WACzB,GAAIC,oBAAqBD,UAAUE,eAAe,WAC9CC,eAAiBC,QAAQC,aAAaL,UAAUM,KAEpD,IAAIL,mBAAoB,CACtB,GAAIM,cAAeP,UAAUE,eAAe,WACvCF,UAAUQ,OAAOC,QAAQN,iBAAmB,EAE7CX,MAAQe,aACRJ,eACAH,UAAUU,OAEdC,UAASb,aAAaE,UAAUM,KAAMd,WAC7BW,iBACTQ,SAASb,aAAaE,UAAUM,KAAMH,gBArF1C,GAAIC,SAAUb,KAEVqB,qBAEAN,KAAM,cACNI,QAAS,cAGTJ,KAAM,OACNI,QAAS,MAGTJ,KAAM,UAGNA,KAAM,SAGNA,KAAM,cAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAKNK,SAAWE,SAASC,cAAc,WACtCF,oBAAmBG,IAAIhB,mBACvBK,QAAQY,YAAYL,UAEpBA,SAASM,iBAAiB,QAAS5B,UAoBnC,IAAI6B,aAAcd,QAAQC,aAAa,cACvC,IAAIa,YAAa,CACf,GAAIC,OAAQN,SAASC,cAAc,QACnCK,OAAMC,YAAchB,QAAQC,aAAa,YAClCa,YADa,YAEhBA,YACJd,QAAQY,YAAYG,QAzExB,GAAIE,WAAYC,OAAOC,OAAOC,YAAYH,UAC1CA,WAAUI,gBAAkBrC,WAC5ByB,SAASa,gBAAgB,eAAgBL,UAAAA","file":"mn-textarea.js","sourcesContent":["'use strict';\n\nlet prototype = Object.create(HTMLElement.prototype);\nprototype.createdCallback = mnTextarea;\ndocument.registerElement('mn-textarea', {prototype});\n\nfunction mnTextarea() {\n  let element = this;\n\n  let textareaAttributes = [\n    {\n      name: 'placeholder',\n      default: 'undefined',\n    },\n    {\n      name: 'rows',\n      default: '1',\n    },\n    {\n      name: 'value',\n    },\n    {\n      name: 'name',\n    },\n    {\n      name: 'autofocus',\n    },\n    {\n      name: 'maxlength',\n    },\n    {\n      name: 'pattern',\n    },\n    {\n      name: 'readonly',\n    },\n    {\n      name: 'required',\n    },\n    {\n      name: 'disabled',\n    },\n  ];\n\n  // textarea element\n  let textarea = document.createElement('textarea');\n  textareaAttributes.map(setInputAttribute);\n  element.appendChild(textarea);\n\n  textarea.addEventListener('keyup', setHeight);\n\n  function setHeight() {\n    let breaks = (this.value.match(/\\n/g) || []).length;\n    let rows;\n    switch (breaks) {\n      case 0:\n        rows = 1;\n        break;\n      case 1:\n        rows = 2;\n        break;\n      default:\n        rows = breaks + 1;\n    }\n    console.log(rows);\n    this.setAttribute('rows', rows);\n  }\n\n  // label element\n  let placeholder = element.getAttribute('placeholder');\n  if (placeholder) {\n    let label = document.createElement('label');\n    label.textContent = element.getAttribute('disabled')\n      ? `${placeholder} disabled`\n      : placeholder;\n    element.appendChild(label);\n  }\n\n  function setInputAttribute(attribute) {\n    let isDefaultAttribute = attribute.hasOwnProperty('default');\n    let attributeValue = element.getAttribute(attribute.name);\n\n    if (isDefaultAttribute) {\n      let isValidValue = attribute.hasOwnProperty('values')\n        && attribute.values.indexOf(attributeValue) >= 0;\n\n      let value = isValidValue\n        ? attributeValue\n        : attribute.default;\n\n      textarea.setAttribute(attribute.name, value);\n    } else if (attributeValue) {\n      textarea.setAttribute(attribute.name, attributeValue);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}